(()=>{"use strict";var e,t,r={667:(e,t,r)=>{r(588),(new class{constructor(){this.container=document.getElementById("widget"),this.addTicket=this.addTicket.bind(this),this.elem=null}createWidget(){const e=document.createElement("div");e.classList.add("widget-container"),e.innerHTML='\n      <div class="list"></div>\n      <div class="footer">\n        <form class="form">\n          <input class="form-input" name="input" type="text">\n        </form>\n      </div>\n              ',this.container.appendChild(e),document.querySelector(".form").addEventListener("submit",this.addTicket)}addTicket(e){e.preventDefault(),this.elem=document.createElement("span"),this.elem.textContent=e.target.input.value,this.getPosition()}getPosition(){navigator.geolocation&&navigator.geolocation.getCurrentPosition((e=>{const{latitude:t,longitude:r}=e.coords;this.showTicket(t.toFixed(5),r.toFixed(5))}),(e=>{this.showModal(),console.error(e)}))}resetInput(){this.container.querySelector(".form-input").value=""}showTicket(e,t){const r=document.querySelector(".list"),n=document.createElement("div");n.classList.add("ticket"),n.innerHTML=`\n         <div class="elem"></div>\n         <div class="date">${(new Date).toLocaleString()}</div>\n         <div class="geo">[${e},${t}]</div>\n      `,r.insertAdjacentElement("afterbegin",n),this.container.querySelector(".elem").insertAdjacentElement("afterbegin",this.elem),this.resetInput()}showModal(){const e=document.createElement("div");e.classList.add("modal"),e.innerHTML='\n        <div class="modal-text">Что-то пошло не так  \n        <p>Извините, но мы не можем определить ваше местоположение, \n        пожалуйста, дайте нам разрешение на использование геолокации \n        либо введите координаты вручную\n        </p>\n        <p>Широта и долгота через запятую</p>\n        <form class="modal-form">\n          <input class="modal-input" name="modal" type="text">\n          <div class="buttons">\n          <button type="reset" class="reset">Отмена</button>\n          <button type="submit" class="ok">Ok</button>\n          </div>\n        </form>\n        </div>\n      ',this.container.querySelector(".widget-container").appendChild(e),this.container.querySelector(".modal-input").addEventListener("input",this.deleteError),this.container.querySelector(".modal-form").addEventListener("submit",(e=>{e.preventDefault();let t=this.checkValidity(e.target.modal.value);if(console.log(t),t){t=t[0].split(",");const e=t[0].trim(),r=t[1].trim();this.hideModal(),this.showTicket(e,r)}else alert("Координаты введены не верно")})),this.container.querySelector(".modal-form").addEventListener("reset",(e=>{e.preventDefault(),this.hideModal()}))}hideModal(){this.container.querySelector(".modal").remove(),this.resetInput()}checkValidity(e){return e.match(/^\[?\d+\.\d+,\s?\-?\d+\.\d+\]?$/gm)}}).createWidget()},140:(e,t,r)=>{var n=r(918),o=Object.create(null),i="undefined"==typeof document,a=Array.prototype.forEach;function c(){}function d(e,t){if(!t){if(!e.href)return;t=e.href.split("?")[0]}if(l(t)&&!1!==e.isLoaded&&t&&t.indexOf(".css")>-1){e.visited=!0;var r=e.cloneNode();r.isLoaded=!1,r.addEventListener("load",(function(){r.isLoaded||(r.isLoaded=!0,e.parentNode.removeChild(e))})),r.addEventListener("error",(function(){r.isLoaded||(r.isLoaded=!0,e.parentNode.removeChild(e))})),r.href="".concat(t,"?").concat(Date.now()),e.nextSibling?e.parentNode.insertBefore(r,e.nextSibling):e.parentNode.appendChild(r)}}function s(){var e=document.querySelectorAll("link");a.call(e,(function(e){!0!==e.visited&&d(e)}))}function l(e){return!!/^[a-zA-Z][a-zA-Z\d+\-.]*:/.test(e)}e.exports=function(e,t){if(i)return console.log("no window.document found, will not HMR CSS"),c;var r,u,f=function(e){var t=o[e];if(!t){if(document.currentScript)t=document.currentScript.src;else{var r=document.getElementsByTagName("script"),i=r[r.length-1];i&&(t=i.src)}o[e]=t}return function(e){if(!t)return null;var r=t.split(/([^\\/]+)\.js$/),o=r&&r[1];return o&&e?e.split(",").map((function(e){var r=new RegExp("".concat(o,"\\.js$"),"g");return n(t.replace(r,"".concat(e.replace(/{fileName}/g,o),".css")))})):[t.replace(".js",".css")]}}(e);return r=function(){var e=f(t.filename),r=function(e){if(!e)return!1;var t=document.querySelectorAll("link"),r=!1;return a.call(t,(function(t){if(t.href){var o=function(e,t){var r;return e=n(e),t.some((function(n){e.indexOf(t)>-1&&(r=n)})),r}(t.href,e);l(o)&&!0!==t.visited&&o&&(d(t,o),r=!0)}})),r}(e);if(t.locals)return console.log("[HMR] Detected local css modules. Reload all css"),void s();r?console.log("[HMR] css reload %s",e.join(" ")):(console.log("[HMR] Reload all css"),s())},50,u=0,function(){var e=this,t=arguments;clearTimeout(u),u=setTimeout((function(){return r.apply(e,t)}),50)}}},918:e=>{e.exports=function(e){if(e=e.trim(),/^data:/i.test(e))return e;var t=-1!==e.indexOf("//")?e.split("//")[0]+"//":"",r=e.replace(new RegExp(t,"i"),"").split("/"),n=r[0].toLowerCase().replace(/\.$/,"");return r[0]="",t+n+r.reduce((function(e,t){switch(t){case"..":e.pop();break;case".":break;default:e.push(t)}return e}),[]).join("/")}},588:(e,t,r)=>{var n=r(140)(e.id,{locals:!1});e.hot.dispose(n),e.hot.accept(void 0,n)}},n={};function o(e){var t=n[e];if(void 0!==t){if(void 0!==t.error)throw t.error;return t.exports}var i=n[e]={id:e,exports:{}};try{var a={id:e,module:i,factory:r[e],require:o};o.i.forEach((function(e){e(a)})),i=a.module,a.factory.call(i.exports,i,i.exports,a.require)}catch(e){throw i.error=e,e}return i.exports}o.m=r,o.c=n,o.i=[],o.hu=e=>e+"."+o.h()+".hot-update.js",o.miniCssF=e=>{},o.hmrF=()=>"main."+o.h()+".hot-update.json",o.h=()=>"0908b2c9d30583a57cec",o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),e={},t="geolocation:",o.l=(r,n,i,a)=>{if(e[r])e[r].push(n);else{var c,d;if(void 0!==i)for(var s=document.getElementsByTagName("script"),l=0;l<s.length;l++){var u=s[l];if(u.getAttribute("src")==r||u.getAttribute("data-webpack")==t+i){c=u;break}}c||(d=!0,(c=document.createElement("script")).charset="utf-8",c.timeout=120,o.nc&&c.setAttribute("nonce",o.nc),c.setAttribute("data-webpack",t+i),c.src=r),e[r]=[n];var f=(t,n)=>{c.onerror=c.onload=null,clearTimeout(p);var o=e[r];if(delete e[r],c.parentNode&&c.parentNode.removeChild(c),o&&o.forEach((e=>e(n))),t)return t(n)},p=setTimeout(f.bind(null,void 0,{type:"timeout",target:c}),12e4);c.onerror=f.bind(null,c.onerror),c.onload=f.bind(null,c.onload),d&&document.head.appendChild(c)}},(()=>{var e,t,r,n={},i=o.c,a=[],c=[],d="idle",s=0,l=[];function u(e){d=e;for(var t=[],r=0;r<c.length;r++)t[r]=c[r].call(null,e);return Promise.all(t).then((function(){}))}function f(){0==--s&&u("ready").then((function(){if(0===s){var e=l;l=[];for(var t=0;t<e.length;t++)e[t]()}}))}function p(e){if("idle"!==d)throw new Error("check() is only allowed in idle status");return u("check").then(o.hmrM).then((function(r){return r?u("prepare").then((function(){var n=[];return t=[],Promise.all(Object.keys(o.hmrC).reduce((function(e,i){return o.hmrC[i](r.c,r.r,r.m,e,t,n),e}),[])).then((function(){return t=function(){return e?m(e):u("ready").then((function(){return n}))},0===s?t():new Promise((function(e){l.push((function(){e(t())}))}));var t}))})):u(v()?"ready":"idle").then((function(){return null}))}))}function h(e){return"ready"!==d?Promise.resolve().then((function(){throw new Error("apply() is only allowed in ready status (state: "+d+")")})):m(e)}function m(e){e=e||{},v();var n=t.map((function(t){return t(e)}));t=void 0;var o=n.map((function(e){return e.error})).filter(Boolean);if(o.length>0)return u("abort").then((function(){throw o[0]}));var i=u("dispose");n.forEach((function(e){e.dispose&&e.dispose()}));var a,c=u("apply"),d=function(e){a||(a=e)},s=[];return n.forEach((function(e){if(e.apply){var t=e.apply(d);if(t)for(var r=0;r<t.length;r++)s.push(t[r])}})),Promise.all([i,c]).then((function(){return a?u("fail").then((function(){throw a})):r?m(e).then((function(e){return s.forEach((function(t){e.indexOf(t)<0&&e.push(t)})),e})):u("idle").then((function(){return s}))}))}function v(){if(r)return t||(t=[]),Object.keys(o.hmrI).forEach((function(e){r.forEach((function(r){o.hmrI[e](r,t)}))})),r=void 0,!0}o.hmrD=n,o.i.push((function(l){var m,v,g,y,E=l.module,b=function(t,r){var n=i[r];if(!n)return t;var o=function(o){if(n.hot.active){if(i[o]){var c=i[o].parents;-1===c.indexOf(r)&&c.push(r)}else a=[r],e=o;-1===n.children.indexOf(o)&&n.children.push(o)}else console.warn("[HMR] unexpected require("+o+") from disposed module "+r),a=[];return t(o)},c=function(e){return{configurable:!0,enumerable:!0,get:function(){return t[e]},set:function(r){t[e]=r}}};for(var l in t)Object.prototype.hasOwnProperty.call(t,l)&&"e"!==l&&Object.defineProperty(o,l,c(l));return o.e=function(e,r){return function(e){switch(d){case"ready":u("prepare");case"prepare":return s++,e.then(f,f),e;default:return e}}(t.e(e,r))},o}(l.require,l.id);E.hot=(m=l.id,v=E,y={_acceptedDependencies:{},_acceptedErrorHandlers:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:g=e!==m,_requireSelf:function(){a=v.parents.slice(),e=g?void 0:m,o(m)},active:!0,accept:function(e,t,r){if(void 0===e)y._selfAccepted=!0;else if("function"==typeof e)y._selfAccepted=e;else if("object"==typeof e&&null!==e)for(var n=0;n<e.length;n++)y._acceptedDependencies[e[n]]=t||function(){},y._acceptedErrorHandlers[e[n]]=r;else y._acceptedDependencies[e]=t||function(){},y._acceptedErrorHandlers[e]=r},decline:function(e){if(void 0===e)y._selfDeclined=!0;else if("object"==typeof e&&null!==e)for(var t=0;t<e.length;t++)y._declinedDependencies[e[t]]=!0;else y._declinedDependencies[e]=!0},dispose:function(e){y._disposeHandlers.push(e)},addDisposeHandler:function(e){y._disposeHandlers.push(e)},removeDisposeHandler:function(e){var t=y._disposeHandlers.indexOf(e);t>=0&&y._disposeHandlers.splice(t,1)},invalidate:function(){switch(this._selfInvalidated=!0,d){case"idle":t=[],Object.keys(o.hmrI).forEach((function(e){o.hmrI[e](m,t)})),u("ready");break;case"ready":Object.keys(o.hmrI).forEach((function(e){o.hmrI[e](m,t)}));break;case"prepare":case"check":case"dispose":case"apply":(r=r||[]).push(m)}},check:p,apply:h,status:function(e){if(!e)return d;c.push(e)},addStatusHandler:function(e){c.push(e)},removeStatusHandler:function(e){var t=c.indexOf(e);t>=0&&c.splice(t,1)},data:n[m]},e=void 0,y),E.parents=a,E.children=[],a=[],l.require=b})),o.hmrC={},o.hmrI={}})(),(()=>{var e;o.g.importScripts&&(e=o.g.location+"");var t=o.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");if(r.length)for(var n=r.length-1;n>-1&&(!e||!/^http(s?):/.test(e));)e=r[n--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),o.p=e})(),(()=>{if("undefined"!=typeof document){var e=[],t=[],r=r=>({dispose:()=>{for(var t=0;t<e.length;t++){var r=e[t];r.parentNode&&r.parentNode.removeChild(r)}e.length=0},apply:()=>{for(var e=0;e<t.length;e++)t[e].rel="stylesheet";t.length=0}});o.hmrC.miniCss=(n,i,a,c,d,s)=>{d.push(r),n.forEach((r=>{var n=o.miniCssF(r),i=o.p+n,a=((e,t)=>{for(var r=document.getElementsByTagName("link"),n=0;n<r.length;n++){var o=(a=r[n]).getAttribute("data-href")||a.getAttribute("href");if("stylesheet"===a.rel&&(o===e||o===t))return a}var i=document.getElementsByTagName("style");for(n=0;n<i.length;n++){var a;if((o=(a=i[n]).getAttribute("data-href"))===e||o===t)return a}})(n,i);a&&c.push(new Promise(((n,c)=>{var d=((e,t,r,n,i)=>{var a=document.createElement("link");return a.rel="stylesheet",a.type="text/css",o.nc&&(a.nonce=o.nc),a.onerror=a.onload=r=>{if(a.onerror=a.onload=null,"load"===r.type)n();else{var o=r&&r.type,c=r&&r.target&&r.target.href||t,d=new Error("Loading CSS chunk "+e+" failed.\n("+o+": "+c+")");d.name="ChunkLoadError",d.code="CSS_CHUNK_LOAD_FAILED",d.type=o,d.request=c,a.parentNode&&a.parentNode.removeChild(a),i(d)}},a.href=t,r?r.parentNode.insertBefore(a,r.nextSibling):document.head.appendChild(a),a})(r,i,a,(()=>{d.as="style",d.rel="preload",n()}),c);e.push(a),t.push(d)})))}))}}})(),(()=>{var e,t,r,n,i,a=o.hmrS_jsonp=o.hmrS_jsonp||{792:0},c={};function d(t,r){return e=r,new Promise(((e,r)=>{c[t]=e;var n=o.p+o.hu(t),i=new Error;o.l(n,(e=>{if(c[t]){c[t]=void 0;var n=e&&("load"===e.type?"missing":e.type),o=e&&e.target&&e.target.src;i.message="Loading hot update chunk "+t+" failed.\n("+n+": "+o+")",i.name="ChunkLoadError",i.type=n,i.request=o,r(i)}}))}))}function s(e){function c(e){for(var t=[e],r={},n=t.map((function(e){return{chain:[e],id:e}}));n.length>0;){var i=n.pop(),a=i.id,c=i.chain,s=o.c[a];if(s&&(!s.hot._selfAccepted||s.hot._selfInvalidated)){if(s.hot._selfDeclined)return{type:"self-declined",chain:c,moduleId:a};if(s.hot._main)return{type:"unaccepted",chain:c,moduleId:a};for(var l=0;l<s.parents.length;l++){var u=s.parents[l],f=o.c[u];if(f){if(f.hot._declinedDependencies[a])return{type:"declined",chain:c.concat([u]),moduleId:a,parentId:u};-1===t.indexOf(u)&&(f.hot._acceptedDependencies[a]?(r[u]||(r[u]=[]),d(r[u],[a])):(delete r[u],t.push(u),n.push({chain:c.concat([u]),id:u})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:r}}function d(e,t){for(var r=0;r<t.length;r++){var n=t[r];-1===e.indexOf(n)&&e.push(n)}}o.f&&delete o.f.jsonpHmr,t=void 0;var s={},l=[],u={},f=function(e){console.warn("[HMR] unexpected require("+e.id+") to disposed module")};for(var p in r)if(o.o(r,p)){var h,m=r[p],v=!1,g=!1,y=!1,E="";switch((h=m?c(p):{type:"disposed",moduleId:p}).chain&&(E="\nUpdate propagation: "+h.chain.join(" -> ")),h.type){case"self-declined":e.onDeclined&&e.onDeclined(h),e.ignoreDeclined||(v=new Error("Aborted because of self decline: "+h.moduleId+E));break;case"declined":e.onDeclined&&e.onDeclined(h),e.ignoreDeclined||(v=new Error("Aborted because of declined dependency: "+h.moduleId+" in "+h.parentId+E));break;case"unaccepted":e.onUnaccepted&&e.onUnaccepted(h),e.ignoreUnaccepted||(v=new Error("Aborted because "+p+" is not accepted"+E));break;case"accepted":e.onAccepted&&e.onAccepted(h),g=!0;break;case"disposed":e.onDisposed&&e.onDisposed(h),y=!0;break;default:throw new Error("Unexception type "+h.type)}if(v)return{error:v};if(g)for(p in u[p]=m,d(l,h.outdatedModules),h.outdatedDependencies)o.o(h.outdatedDependencies,p)&&(s[p]||(s[p]=[]),d(s[p],h.outdatedDependencies[p]));y&&(d(l,[h.moduleId]),u[p]=f)}r=void 0;for(var b,w=[],k=0;k<l.length;k++){var _=l[k],I=o.c[_];I&&(I.hot._selfAccepted||I.hot._main)&&u[_]!==f&&!I.hot._selfInvalidated&&w.push({module:_,require:I.hot._requireSelf,errorHandler:I.hot._selfAccepted})}return{dispose:function(){var e;n.forEach((function(e){delete a[e]})),n=void 0;for(var t,r=l.slice();r.length>0;){var i=r.pop(),c=o.c[i];if(c){var d={},u=c.hot._disposeHandlers;for(k=0;k<u.length;k++)u[k].call(null,d);for(o.hmrD[i]=d,c.hot.active=!1,delete o.c[i],delete s[i],k=0;k<c.children.length;k++){var f=o.c[c.children[k]];f&&(e=f.parents.indexOf(i))>=0&&f.parents.splice(e,1)}}}for(var p in s)if(o.o(s,p)&&(c=o.c[p]))for(b=s[p],k=0;k<b.length;k++)t=b[k],(e=c.children.indexOf(t))>=0&&c.children.splice(e,1)},apply:function(t){for(var r in u)o.o(u,r)&&(o.m[r]=u[r]);for(var n=0;n<i.length;n++)i[n](o);for(var a in s)if(o.o(s,a)){var c=o.c[a];if(c){b=s[a];for(var d=[],f=[],p=[],h=0;h<b.length;h++){var m=b[h],v=c.hot._acceptedDependencies[m],g=c.hot._acceptedErrorHandlers[m];if(v){if(-1!==d.indexOf(v))continue;d.push(v),f.push(g),p.push(m)}}for(var y=0;y<d.length;y++)try{d[y].call(null,b)}catch(r){if("function"==typeof f[y])try{f[y](r,{moduleId:a,dependencyId:p[y]})}catch(n){e.onErrored&&e.onErrored({type:"accept-error-handler-errored",moduleId:a,dependencyId:p[y],error:n,originalError:r}),e.ignoreErrored||(t(n),t(r))}else e.onErrored&&e.onErrored({type:"accept-errored",moduleId:a,dependencyId:p[y],error:r}),e.ignoreErrored||t(r)}}}for(var E=0;E<w.length;E++){var k=w[E],_=k.module;try{k.require(_)}catch(r){if("function"==typeof k.errorHandler)try{k.errorHandler(r,{moduleId:_,module:o.c[_]})}catch(n){e.onErrored&&e.onErrored({type:"self-accept-error-handler-errored",moduleId:_,error:n,originalError:r}),e.ignoreErrored||(t(n),t(r))}else e.onErrored&&e.onErrored({type:"self-accept-errored",moduleId:_,error:r}),e.ignoreErrored||t(r)}}return l}}}self.webpackHotUpdategeolocation=(t,n,a)=>{for(var d in n)o.o(n,d)&&(r[d]=n[d],e&&e.push(d));a&&i.push(a),c[t]&&(c[t](),c[t]=void 0)},o.hmrI.jsonp=function(e,t){r||(r={},i=[],n=[],t.push(s)),o.o(r,e)||(r[e]=o.m[e])},o.hmrC.jsonp=function(e,c,l,u,f,p){f.push(s),t={},n=c,r=l.reduce((function(e,t){return e[t]=!1,e}),{}),i=[],e.forEach((function(e){o.o(a,e)&&void 0!==a[e]?(u.push(d(e,p)),t[e]=!0):t[e]=!1})),o.f&&(o.f.jsonpHmr=function(e,r){t&&o.o(t,e)&&!t[e]&&(r.push(d(e)),t[e]=!0)})},o.hmrM=()=>{if("undefined"==typeof fetch)throw new Error("No browser support: need fetch API");return fetch(o.p+o.hmrF()).then((e=>{if(404!==e.status){if(!e.ok)throw new Error("Failed to fetch update manifest "+e.statusText);return e.json()}}))}})(),o(667)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,